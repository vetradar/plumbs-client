{"version":3,"sources":["../src/index.ts"],"names":["BASE_URL","DEFAULT_HEADERS","PlumbsClient","apiKey","url","fetchOptions","requestBody","params","init","headers","finalURL","paramsObject","key","response","message","options","content_id","src_default"],"mappings":"AAiBA,IAAMA,EAAW,iCACXC,EAAkB,CACpB,eAAgB,kBACpB,EAGMC,EAAN,KAAmB,CACE,QACA,SAAmBF,EACnB,MAEjB,YAAYG,EAAgB,CACxB,GAA4BA,GAAW,MAAQA,IAAW,GACtD,MAAM,IAAI,MAAM,qBAAqB,EAGzC,KAAK,QAAUA,EAEf,KAAK,MAAQ,MAAMC,EAAKC,IAAiB,CACrC,GAAM,CAAE,KAAMC,EAAa,OAAAC,EAAQ,GAAGC,CAAK,EAAIH,GAAgB,CAAC,EAC1DI,EAAU,IAAI,QAAQ,CACxB,GAAGR,EACH,cAAe,WAAW,KAAK,OAAO,EAC1C,CAAC,EAGGS,EAAW,GAAG,KAAK,QAAQ,GAAGN,CAAG,GAGrC,GAAIG,GAAU,OAAO,KAAKA,CAAM,EAAE,OAAS,EAAG,CAC1C,IAAMI,EAAe,OAAO,KAAKJ,CAAM,EAAE,IAAIK,GAAOA,EAAM,IAAM,mBAAmBL,EAAOK,CAAG,CAAC,CAAC,EAAE,KAAK,GAAG,EACzGF,EAAW,GAAGA,CAAQ,IAAIC,CAAY,EAC1C,CAGA,IAAME,EAAW,MAAM,MAAMH,EAAU,CACnC,GAAGF,EACH,QAAAC,CACJ,CAAC,EAED,GAAG,CAACI,EAAS,GAAI,CACb,IAAMC,EAAU,0BAA0BD,EAAS,UAAU,GAC7D,MAAM,IAAI,MAAMC,CAAO,CAC3B,CAEA,OAAOD,EAAS,KAAK,CACzB,CACJ,CAEA,MAAO,CACH,MAAO,CAKH,cAAgBE,GACL,KAAK,MAAM,uBAAwB,CAAC,GAAGA,EAAS,OAAQ,KAAK,CAAQ,CAEpF,CACJ,CAEA,WAAY,CACR,MAAO,CAKH,QAAUA,GACC,KAAK,MAAM,qBAAsB,CAAE,GAAGA,EAAS,OAAQ,KAAM,CAAQ,EAOhF,QAAUC,GACC,KAAK,MAAM,sBAAsBA,CAAU,GAAI,CAAE,OAAQ,KAAM,CAAQ,CAEtF,CACJ,CAEA,MAAO,CACH,MAAO,CAKH,QAAUD,GACC,KAAK,MAAM,0BAA2B,CAAC,GAAGA,EAAS,OAAQ,KAAK,CAAQ,EAOnF,QAAUC,GACC,KAAK,MAAM,2BAA2BA,CAAU,GAAI,CAAE,OAAQ,KAAM,CAAQ,CAE3F,CACJ,CAEA,WAAY,CACR,MAAO,CAKH,QAAUD,GACC,KAAK,MAAM,qBAAsB,CAAE,OAAQA,EAAS,OAAQ,KAAK,CAAQ,EAQpF,QAAS,CAACC,EAAoBD,IACnB,KAAK,MAAM,sBAAsBC,CAAU,GAAI,CAAE,OAAQD,EAAS,OAAQ,KAAM,CAAQ,CAEvG,CACJ,CAEA,cAAe,CACX,MAAO,CAKH,QAAUA,GACC,KAAK,MAAM,0BAA2B,CAAC,GAAGA,EAAS,OAAQ,KAAK,CAAQ,EAOnF,QAAUC,GACC,KAAK,MAAM,2BAA2BA,CAAU,GAAI,CAAE,OAAQ,KAAM,CAAQ,CAE3F,CACJ,CACA,iBAAkB,CACd,MAAO,CAKH,QAAUD,GACC,KAAK,MAAM,uCAAwC,CAAC,GAAGA,EAAS,OAAQ,KAAK,CAAQ,EAOhG,QAAUC,GACC,KAAK,MAAM,wCAAwCA,CAAU,GAAI,CAAE,OAAQ,KAAM,CAAQ,CAExG,CACJ,CACJ,EACOC,EAAQf","sourcesContent":["import {\n    AuthAutoLoginRequest,\n    AuthAutoLoginResponse,\n    MonographFullRequest,\n    PlumbsAlgorithmResponse,\n    PlumbsDxTxFullResponse,\n    PlumbsDxTxResponse,\n    PlumbsGetListOptions,\n    PlumbsMedicationGuideFullResponse,\n    PlumbsMedicationGuideResponse,\n    PlumbsMonographFullResponse,\n    PlumbsMonographResponse,\n    PlumbsPagingListResponse,\n    PlumbsPatientGuideFullResponse,\n    PlumbsPatientGuideResponse\n} from \"./types\";\n\nconst BASE_URL = 'https://app.plumbs.com/api/v2/';\nconst DEFAULT_HEADERS = {\n    \"Content-Type\": \"application/json\",\n};\n\n\nclass PlumbsClient {\n    private readonly _apiKey: string\n    private readonly _baseUrl: string = BASE_URL\n    private readonly Fetch: (url: string, fetchOptions: any) => Promise<any>\n\n    constructor(apiKey: string) {\n        if (apiKey === undefined || apiKey === null || apiKey === '') {\n            throw new Error('API Key is required')\n        }\n\n        this._apiKey = apiKey\n\n        this.Fetch = async(url, fetchOptions) => {\n            const { body: requestBody, params, ...init } = fetchOptions || {};\n            const headers = new Headers({\n                ...DEFAULT_HEADERS,\n                Authorization: `Api-Key ${this._apiKey}`,\n            });\n\n            // URL\n            let finalURL = `${this._baseUrl}${url}`;\n\n            // check for params and append to URL\n            if (params && Object.keys(params).length > 0) {\n                const paramsObject = Object.keys(params).map(key => key + '=' + encodeURIComponent(params[key])).join('&');\n                finalURL = `${finalURL}?${paramsObject}`;\n            }\n\n            // fetch!\n            const response = await fetch(finalURL, {\n                ...init,\n                headers,\n            });\n\n            if(!response.ok) {\n                const message = `An error has occurred: ${response.statusText}`;\n                throw new Error(message);\n            }\n\n            return response.json();\n        };\n    }\n\n    auth() {\n        return {\n            /**\n             * This integration allows you to log in to Plumb's via your external program and Plumb's Api Key.\n             * @param options\n             */\n            autologinLink: (options: AuthAutoLoginRequest): Promise<AuthAutoLoginResponse> => {\n                return this.Fetch('/auth/autologin-link', {...options, method: \"GET\"} as any);\n            },\n        }\n    }\n\n    algorithm() {\n        return {\n            /**\n             * Get algorithm data list with pagination.\n             * @param options Optional parameters\n             */\n            getList: (options?: PlumbsGetListOptions): Promise<PlumbsPagingListResponse<PlumbsGetListOptions>> => {\n                return this.Fetch('contents/algorithm', { ...options, method: \"GET\" } as any);\n            },\n\n            /**\n             * Get algorithm data for given ID.\n             * @param content_id\n             */\n            getById: (content_id: string): Promise<PlumbsAlgorithmResponse> => {\n                return this.Fetch(`contents/algorithm/${content_id}`, { method: \"GET\" } as any);\n            },\n        }\n    }\n\n    dxTx() {\n        return {\n            /**\n             * Get dx & tx data list with pagination.\n             * @param options Optional parameters\n             */\n            getList: (options?: PlumbsGetListOptions): Promise<PlumbsPagingListResponse<PlumbsDxTxResponse>> => {\n                return this.Fetch('contents/clinical-brief', {...options, method: \"GET\"} as any);\n            },\n\n            /**\n             * Get dx & tx data for given ID.\n             * @param content_id\n             */\n            getById: (content_id: string): Promise<PlumbsDxTxFullResponse> => {\n                return this.Fetch(`contents/clinical-brief/${content_id}`, { method: \"GET\" } as any);\n            },\n        }\n    }\n\n    monograph() {\n        return {\n            /**\n             * Get monograph data list with pagination.\n             * @param options\n             */\n            getList: (options?: PlumbsGetListOptions): Promise<PlumbsPagingListResponse<PlumbsMonographResponse>> => {\n                return this.Fetch('contents/monograph', { params: options, method: \"GET\"} as any);\n            },\n\n            /**\n             * Get monograph data for given ID.\n             * @param content_id\n             * @param options\n             */\n            getById: (content_id: string, options?: MonographFullRequest): Promise<PlumbsMonographFullResponse> => {\n                return this.Fetch(`contents/monograph/${content_id}`, { params: options, method: \"GET\" } as any);\n            },\n        }\n    }\n\n    patientGuide() {\n        return {\n            /**\n             * Get patient guide data list with pagination.\n             * @param options Optional parameters\n             */\n            getList: (options?: PlumbsGetListOptions): Promise<PlumbsPagingListResponse<PlumbsPatientGuideResponse>> => {\n                return this.Fetch('contents/patient-guides', {...options, method: \"GET\"} as any);\n            },\n\n            /**\n             * Get patient guide data for given ID.\n             * @param content_id\n             */\n            getById: (content_id: string): Promise<PlumbsPatientGuideFullResponse> => {\n                return this.Fetch(`contents/patient-guides/${content_id}`, { method: \"GET\" } as any);\n            },\n        }\n    }\n    medicationGuide() {\n        return {\n            /**\n             * Get medication guide data list with pagination.\n             * @param options Optional parameters\n             */\n            getList: (options?: PlumbsGetListOptions): Promise<PlumbsPagingListResponse<PlumbsMedicationGuideResponse>> => {\n                return this.Fetch('contents/veterinary-medication-guide', {...options, method: \"GET\"} as any);\n            },\n\n            /**\n             * Get medication guide data for given ID.\n             * @param content_id\n             */\n            getById: (content_id: string): Promise<PlumbsMedicationGuideFullResponse> => {\n                return this.Fetch(`contents/veterinary-medication-guide/${content_id}`, { method: \"GET\" } as any);\n            },\n        }\n    }\n}\nexport default PlumbsClient;"]}